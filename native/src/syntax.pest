// Helper
escape = _{ "\\" ~ (!(NEWLINE | ASCII_HEX_DIGIT) ~ ANY | ASCII_HEX_DIGIT{1,6}) }
single_line_comment = _{ "//" ~ (!NEWLINE ~ ANY)* }
comma = _{ WHITE_SPACE* ~ "," ~ WHITE_SPACE* }
ident = _{ (ASCII_ALPHA | "-"{1,2} | "_" | escape) ~ (ASCII_ALPHANUMERIC | "-"{1,2} | "_" | escape)* }
nl = _{ ("\t" | " ")* ~ NEWLINE }

// Value
symbol = { ident }
multi_line_comment = { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
function = { ident }
function_w = _{ function ~ "(" }
atrule = { ident }
atrule_w = { "@" ~ atrule }
hash = { ASCII_HEX_DIGIT{1,6} }
hash_w = _{ "#" ~ hash }
number = { 
	(
		("+" | "-")? ~
		(ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? | "." ~ ASCII_DIGIT+)
	) ~
	(^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}
single_string = { ("\\'" | "\\" ~ NEWLINE | !("'" | NEWLINE) ~ ANY)* }
double_string = { ("\\\"" | "\\" ~ NEWLINE | !("\"" | NEWLINE) ~ ANY)* }
string_w = _{
	("\"" ~ double_string ~ "\"")
	| ("'" ~ single_string ~ "'")
}
unit = { "%" | ASCII_ALPHA+ }
dimension = { number ~ unit }
surround = { (ASCII_ALPHANUMERIC | "." | "-" | "_" | escape)+ }
interpolation = {
	surround? ~
	(
		"{" ~ WHITE_SPACE* ~ expr ~ WHITE_SPACE* ~ "}" ~
		surround?
	)+
}
tuple = { val ~ (("\t" | " ")+ ~ val)+ }
var = { ident? }
var_w = _{ "$" ~ var }

// Expressions
accessor = { var_w ~ ("." ~ symbol)+ }
object = {
	"{" ~
	(
		WHITE_SPACE* ~ symbol ~ WHITE_SPACE* ~ ":" ~
		WHITE_SPACE* ~ expr ~ NEWLINE?
	)* ~
	WHITE_SPACE* ~ "}"
}

// Line
var_def = { var_w ~ WHITE_SPACE* ~ "=" ~ WHITE_SPACE* ~ expr }

// Enums
val = _{ interpolation | dimension | symbol | hash_w | number | string_w | var_w }
value = _{ tuple | val }
expr = _{ accessor | object | value }
line = { var_def }

// Selectors
indent = _{ "\t" | "    " | "  " | " " }
sel_bit = _{ ("&" | "/" | "." | "#" | ":" | ident | ("[" ~ ANY* ~ "]"))+ }
sel = { sel_bit ~ (("\t" | " ")* ~ (sel_bit | ">"))* }
property = { 
	indent ~
	symbol ~ WHITE_SPACE* ~
	": " ~ WHITE_SPACE* ~ value ~
	("\t" | " ")* ~
	NEWLINE?
}
mixin_call = {
	indent ~
	function_w ~ WHITE_SPACE* ~
	value ~ (comma ~ value)* ~ WHITE_SPACE* ~ ")" ~ 
	("\t" | " ")* ~
	NEWLINE?
}
subsel = {
	PUSH(indent) ~
	sel ~ (comma ~ sel)* ~ ("\t" | " ")* ~
	NEWLINE ~
	(PEEK_ALL ~ indent ~ line ~ NEWLINE)* ~
	(nl | PEEK_ALL ~ (property | mixin_call | subsel))+ ~
	DROP
}

// Nodes
selector = {
	sel ~ (comma ~ sel)* ~
	NEWLINE ~
	(nl | indent ~ line ~ NEWLINE)* ~
	(nl | property | mixin_call | subsel)+
}
mixin = { 
	function_w ~ WHITE_SPACE* ~
	symbol ~ (comma ~ symbol)* ~ WHITE_SPACE* ~
	")" ~ NEWLINE ~
	(nl | indent ~ line ~ NEWLINE)* ~
	(nl | property)+
}

// Root
node = _{ single_line_comment | multi_line_comment | selector | mixin }
file = _{
    SOI ~
    NEWLINE* ~
    (node ~ NEWLINE*)* ~
    EOI
}
